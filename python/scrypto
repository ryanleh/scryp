#!/usr/bin/python3
import argparse
import os
import sys
import getpass
from pathlib import Path

# Confirm that user is running python3
if sys.hexversion < 0x3000000:
    print("Please use python3")
    sys.exit(0)

# Attempt to import cryptography modules
try:
    from cryptography.hazmat.primitives.ciphers import aead
    from cryptography.hazmat.primitives import hashes
    from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
    from cryptography.hazmat.backends import default_backend
    from cryptography.exceptions import InvalidTag
except ImportError:
    print("scrypto requires cryptography. Install with: "
          "pip3 install cryptography")
    sys.exit(0)

# CRYPTO MODULES
CIPHERS = {
        'AES-GCM': aead.AESGCM
}
HASHERS = {
        'SHA256': hashes.SHA256(),
}
backend = default_backend()


class ScryptoError(Exception):
    """Exception raised for errors related to message decryption"""
    def __init__(self, message):
        self.message = message


class Crypto(object):
    """Handles all cryptographic operations"""
    def __init__(self, cipher, hasher, password, salt=None, nonce=None):
        # Match nonce to provided input or randomness
        self.nonce = nonce or self.get_random_bytes(12)
        self.hasher = HASHERS[hasher]
        # Match salt to provided input or randomness
        self.salt = salt or self.get_random_bytes(16)
        # Use PBKDF2 to derive key and hash it
        self.key = self.derive_key(password)
        self.key_hash = self.hash(self.key)
        self.cipher = CIPHERS[cipher](self.key)

    def get_random_bytes(self, n):
        """Returns n bytes of randomness"""
        return os.urandom(n)

    def constant_time_comparison(self, str1, str2):
        """Compares two strings in constant times to avoid timing attacks"""
        if len(str1) != len(str2):
            raise ScryptoError("File is of incorrect format")
        is_equal = True
        for a, b in zip(str1, str2):
            if a != b:
                is_equal = False
        return is_equal

    def _verify_key(self, file_key_hash):
        """Verifies password hash"""
        # Check if password is correct before decryption b/c padding oracles
        if not self.constant_time_comparison(self.key_hash, file_key_hash):
            raise ScryptoError("Incorrect password or file has been tampered "
                               "with")

    def derive_key(self, password):
        """Runs PBKDF2 with 300000 iterations on provided password"""
        # You'll probably want to change iterations to something
        # smaller.
        # Using SHA256 to avoid https://eprint.iacr.org/2016/273.pdf
        kdf = PBKDF2HMAC(self.hasher,
                         length=32,
                         salt=self.salt,
                         iterations=300000,
                         backend=default_backend()
                         )
        key = kdf.derive(password)
        return key

    def hash(self, msg):
        """Computes the hash of a given msg"""
        hasher = hashes.Hash(self.hasher, backend=default_backend())
        hasher.update(msg)
        return hasher.finalize()

    def aes_encrypt(self, plaintext, filename):
        """Encrypts plaintext using specified cipher and provided key"""
        try:
            ciphertext = self.cipher.encrypt(self.nonce, plaintext,
                                             bytes(filename, 'utf-8'))
        except OverflowError:
            print("Attempting to encrypt over 2^32 bytes of data with one key"
                  ". Split up plaintext file")

        return ciphertext

    def aes_decrypt(self, ciphertext, filename):
        """Decrypts ciphertext using specified cipher and provided key/nonce"""
        try:
            plaintext = self.cipher.decrypt(self.nonce, ciphertext,
                                            bytes(filename, 'utf-8'))
        except InvalidTag:
            raise ScryptoError("File has been tampered with")
        return plaintext

    def pack_enc(self, ciphertext):
        """Returns an array containing Crypto instance's params"""
        return self.salt + self.key_hash + self.nonce + ciphertext

    def unpack_enc(password, crypto_content):
        """Extracts the crypto params and ciphertext from an enc file, verifies
        integrity of the parameters, and instantiates a new Crypto instance.
        Returns the ciphertext and crypto object"""
        try:
            salt = crypto_content[:16]
            key_hash = crypto_content[16:48]
            nonce = crypto_content[48:60]
            ciphertext = crypto_content[60:]
        except IndexError:
            raise ScryptoError("File has been tampered with")
        crypto = Crypto("AES-GCM", "SHA256", password, salt, nonce)
        crypto._verify_key(key_hash)
        return ciphertext, crypto


class FileHandler(object):
    """Handles all file i/o"""
    def __init__(self, filepath, output_dir, operation, remove):
        self.filepath = filepath
        # Try to open the given filepath
        try:
            with open(filepath, 'br') as f:
                self.content = f.read()
        except IOError:
            raise ScryptoError("File does not exist. Skipping")
        self.output_dir = output_dir
        self.filename = Path(self.filepath).name
        self.operation = operation
        self.remove = remove

    def get_filename(self):
        """Returns the file's name"""
        return self.filename

    def get_content(self):
        """Returns the files' contents"""
        return self.content

    def _write(self, to_write):
        """Writes to_write to the specified filename"""
        try:
            with open(self.output_dir + "/" + self.name_to_write, 'bw') as f:
                f.write(to_write)
        except IOError:
            raise ScryptoError("Couldn't open {} for writing. Insufficient"
                               " permissions or name is a directory".format(
                                   self.output_dir + "/" + self.name_to_write))
        if self.operation == "ENCRYPT":
            print("File: {} encrypted!".format(self.filename))
        else:
            print("File: {} decrypted!".format(self.filename))
        if self.remove:
            os.remove(self.filepath)

    def create_enc(self, crypto_content):
        """Extracts the file's name and concatenates it with crypto_content"""
        # Strip filename of extension and add .enc
        self.name_to_write = "{}.enc".format(Path(self.filename).stem)
        # Forward slashes are banned in filenames so use that as a separator
        self._write((bytes(self.filename, 'utf-8') + b"/" + crypto_content))

    def dismantle_enc(self):
        """Extracts filename and crypto_content from enc file"""
        # Extract all components of file
        try:
            self.name_to_write = str(self.content.split(b"/")[0], 'utf-8')
            crypto_content = self.content.split(b"/", 1)[1]
        except IndexError:
            raise ScryptoError("File has been tampered with")
        return self.name_to_write, crypto_content

    def create_orig(self, plaintext):
        """Writes the plaintext to given filename"""
        self._write(plaintext)


def make_parser():
    """Builds ArgumentParser Object"""
    parser = argparse.ArgumentParser(description='Encrypt files using 128-bit '
                                     'AES-GCM')
    parser.add_argument('filepaths', nargs='+',
                        help='Files to encrypt/decrypt (Default is encrypt)',
                        type=str)
    parser.add_argument('-o', '--output-dir', required=False,
                        type=str,
                        help='Directory to output files')
    parser.add_argument('-d', '--decrypt', required=False,
                        action='store_true',
                        help='Decrypt file')
    parser.add_argument('-r', '--remove', required=False,
                        action='store_true',
                        help='Remove original file')
    return parser


def encryptor(filepath, output_dir, password, remove):
    """Encrypts the given file with the given password"""
    # Create crypto object
    crypto = Crypto("AES-GCM", "SHA256", password)
    file_handler = FileHandler(filepath, output_dir, "ENCRYPT", remove)

    # Encrypt and write file
    ciphertext = crypto.aes_encrypt(file_handler.get_content(),
                                    file_handler.get_filename())
    crypto_content = crypto.pack_enc(ciphertext)
    file_handler.create_enc(crypto_content)


def decryptor(filepath, output_dir, password, remove):
    """Decrypts the given file with the given password"""
    # Parse file and create crypto object
    file_handler = FileHandler(filepath, output_dir, "DECRYPT", remove)
    orig_filename, crypto_content = file_handler.dismantle_enc()
    ciphertext, crypto = Crypto.unpack_enc(password, crypto_content)

    # Decrypt and write file
    plaintext = crypto.aes_decrypt(ciphertext, orig_filename)
    file_handler.create_orig(plaintext)


if __name__ == "__main__":
    # Get arguments and files
    cwd = os.getcwd()
    args = make_parser().parse_args()
    filepaths = args.filepaths
    output_dir = args.output_dir
    # If user has specified an output directory, make sure it's valid or use
    # the working directory
    if output_dir:
        if not os.path.isdir(output_dir):
            print("Insufficient privileges or output directory {} is invalid"
                  .format(output_dir))
            sys.exit(1)
    else:
        cwd = os.getcwd()
        if not os.path.isdir(cwd):
            print("Insufficient privileges or working directory {} is invalid"
                  .format(cwd))
            sys.exit(1)
        output_dir = cwd

    remove = args.remove
    decrypt = args.decrypt
    password = bytes(getpass.getpass(), 'utf-8')

    # Encrypt/decrypt each file
    for filepath in filepaths:
        if decrypt:
            try:
                decryptor(filepath, output_dir, password, remove)
            except ScryptoError as e:
                print("Decrypting {} failed: {}".format(filepath, e))
        else:
            try:
                encryptor(filepath, output_dir, password, remove)
            except ScryptoError as e:
                print("Encrypting {} failed: {}".format(filepath, e))
